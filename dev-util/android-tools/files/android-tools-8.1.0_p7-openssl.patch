Porting from BoringSSL for OpenSSL compability

diff -Naur a/system/core/adb/adb_auth_host.cpp b/system/core/adb/adb_auth_host.cpp
--- a/system/core/adb/adb_auth_host.cpp	1970-01-01 05:00:00.000000000 +0500
+++ b/system/core/adb/adb_auth_host.cpp	2017-01-04 22:19:02.913121849 +0500
@@ -37,6 +37,6 @@
-#include <openssl/base64.h>
 #include <openssl/evp.h>
 #include <openssl/objects.h>
 #include <openssl/pem.h>
 #include <openssl/rsa.h>
 #include <openssl/sha.h>
+#include "openssl_compability.h"
diff -Naur a/system/core/adb/openssl_compability.h b/system/core/adb/openssl_compability.h
--- a/system/core/adb/openssl_compability.h  1970-01-01 05:00:00.000000000 +0500
+++ b/system/core/adb/openssl_compability.h  2017-01-04 22:19:02.912121861 +0500
@@ -0,0 +0,20 @@
+int EVP_EncodedLength(size_t *out_len, size_t len) {
+  if (len + 2 < len) {
+    return 0;
+  }
+  len += 2;
+  len /= 3;
+
+  if (((len << 2) >> 2) != len) {
+    return 0;
+  }
+  len <<= 2;
+
+  if (len + 1 < len) {
+    return 0;
+  }
+  len++;
+
+  *out_len = len;
+  return 1;
+}
diff -Naur a/system/core/libcrypto_utils/android_pubkey.c b/system/core/libcrypto_utils/android_pubkey.c
--- a/system/core/libcrypto_utils/android_pubkey.c	1970-01-01 05:00:00.000000000 +0500
+++ b/system/core/libcrypto_utils/android_pubkey.c	2017-01-04 22:19:02.913121849 +0500
@@ -20,6 +20,7 @@
 #include <stdlib.h>
 #include <string.h>
 
 #include <openssl/bn.h>
+#include "openssl_compability.h"
 
 // Better safe than sorry.
diff -Naur a/system/core/libcrypto_utils/openssl_compability.h b/system/core/libcrypto_utils/openssl_compability.h
--- a/system/core/libcrypto_utils/openssl_compability.h  1970-01-01 05:00:00.000000000 +0500
+++ b/system/core/libcrypto_utils/openssl_compability.h  2017-01-04 22:19:02.912121861 +0500
@@ -0,0 +0,36 @@
+#include <string.h>
+
+#include <openssl/bn.h>
+
+static int fits_in_bytes(const uint8_t *bytes, size_t num_bytes, size_t len) {
+  uint8_t mask = 0;
+  for (size_t i = len; i < num_bytes; i++) {
+    mask |= bytes[i];
+  }
+  return mask == 0;
+}
+
+int BN_bn2bin_padded(uint8_t *out, size_t len, const BIGNUM *in) {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
+  const uint8_t *bytes = (const uint8_t *)in->d;
+  size_t num_bytes = in->top * BN_BYTES;
+  if (len < num_bytes) {
+    if (!fits_in_bytes(bytes, num_bytes, len)) {
+      return 0;
+    }
+    num_bytes = len;
+  }
+  // We only support little-endian platforms, so we can simply write the buffer
+  // in reverse.
+  for (size_t i = 0; i < num_bytes; i++) {
+    out[len - i - 1] = bytes[i];
+  }
+  // Pad out the rest of the buffer with zeroes.
+  memset(out, 0, len - num_bytes);
+#else
+  int res = BN_bn2binpad(in, out, len);
+  if (res == -1)
+    return 0;
+#endif
+  return 1;
+}

Patch for openssl-1.1

diff -Naur a/system/core/libcrypto_utils/android_pubkey.c b/system/core/libcrypto_utils/android_pubkey.c
--- a/system/core/libcrypto_utils/android_pubkey.c	1970-01-01 05:00:00.000000000 +0500
+++ b/system/core/libcrypto_utils/android_pubkey.c	2018-03-04 22:19:02.913121849 +0500
@@ -82,12 +82,25 @@
   memcpy(modulus_buffer, key_struct->modulus, sizeof(modulus_buffer));
   reverse_bytes(modulus_buffer, sizeof(modulus_buffer));
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
   new_key->n = BN_bin2bn(modulus_buffer, sizeof(modulus_buffer), NULL);
   if (!new_key->n) {
+#else
+  BIGNUM *n, *e;
+  n = BN_bin2bn(modulus_buffer, sizeof(modulus_buffer), NULL);
+  RSA_set0_key(new_key, n, NULL, NULL);
+  if (n!=0) {
+#endif
     goto cleanup;
   }
 
   // Read the exponent.
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
   new_key->e = BN_new();
   if (!new_key->e || !BN_set_word(new_key->e, key_struct->exponent)) {
+#else
+  e = BN_new();
+  RSA_set0_key(new_key, NULL, e, NULL);
+  if (e!=0 || !BN_set_word(e, key_struct->exponent)) {
+#endif
     goto cleanup;
   }
@@ -139,5 +139,13 @@
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+  const BIGNUM *n, *e;
+  RSA_get0_key(key, &n, NULL, NULL);
+#endif
   if (!ctx || !r32 || !n0inv || !BN_set_bit(r32, 32) ||
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
       !BN_mod(n0inv, key->n, r32, ctx) ||
+#else
+      !BN_mod(n0inv, n, r32, ctx) ||
+#endif
       !BN_mod_inverse(n0inv, n0inv, r32, ctx) || !BN_sub(n0inv, r32, n0inv)) {
     goto cleanup;
   }
@@ -146,14 +146,27 @@
   // Store the modulus.
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
   if (!android_pubkey_encode_bignum(key->n, key_struct->modulus)) {
+#else
+  if (!android_pubkey_encode_bignum(n, key_struct->modulus)) {
+#endif
     goto cleanup;
   }
 
   // Compute and store rr = (2^(rsa_size)) ^ 2 mod N.
   if (!ctx || !rr || !BN_set_bit(rr, ANDROID_PUBKEY_MODULUS_SIZE * 8) ||
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
       !BN_mod_sqr(rr, rr, key->n, ctx) ||
+#else
+      !BN_mod_sqr(rr, rr, n, ctx) ||
+#endif
       !android_pubkey_encode_bignum(rr, key_struct->rr)) {
     goto cleanup;
   }
 
   // Store the exponent.
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
   key_struct->exponent = (uint32_t)BN_get_word(key->e);
+#else
+  RSA_get0_key(key, NULL, &e, NULL);
+  key_struct->exponent = (uint32_t)BN_get_word(e);
+#endif
